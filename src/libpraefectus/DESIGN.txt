Object/Event System
===================

Praefectus uses a three-layer system of contexts to ensure consistency of both
simulation state and network topology.

Contexts
--------

A context (context.h) is a collection of any number of objects (object.h) and
events (event.h). An object is a container of state, both present and
historical, whereas an event is a *spontaneous* mutation of object
state. Events may be inserted and removed at any time, even at times not
corresponding to the time of the event.

Thus, a context allows for consistent handling of a sequence of events even if
they arrive out of order or late, even as the simulation is advancing
independently of the event inflow; all nodes which have accepted the same
set of events will have exactly the same state for the context.

Application Layer
-----------------

The application layer is the inner-most layer in which application-defined
logic is performed.

Transaction Layer
-----------------

The transaction layer sits atop the application layer. It controls the
acceptance and redaction of application events according to voting performed by
various nodes as well as timing considerations.

Application events entering the transaction layer are associated with a
time-out. An incomming event is initially inserted into the application layer,
but is redacted if the time-out expires without there being sufficient votes
for the event. Sufficient votes, even after the redaction, are sufficient to
keep the event in the application permanently (assuming the votes themselves
are not redacted).

An event with zero time-out is called a pessimistic event; it is not inserted
to the inner layer until sufficient votes have been cast. Non-pessimistic
events are said to be optimistic.

Metatransaction Layer
---------------------

The metatransaction layer sits atop the tranaction and application layers. It
ensures that nodes produce consistent results upon the joining and leaving of
other nodes.

Nodes are at any time associated with two permissions: GRANT and DENY. Events
(both to the metatransaction layer and the lower layer) originating from a node
only have effect if the node has the GRANT permission and does *not* have the
DENY permsission; such a node is said to be "alive". Permissions changes are
effected by a vote from a simple majority of existing nodes; such votes are
only counted from nodes that are alive, and only nodes that are alive count
towards the definition of "majority". Permissions changes only ever take the
effect of giving a node GRANT or DENY; thus, permissions changes are fully
idempotent.

Note that votes themselves are subject to retroactive node status changes; this
means that nodes do not all need to have a perfect global view of permissions
at any time.

Topology System
===============

The Topology System manages the conceptual communication between nodes and
manages the Object/Event System. It does not itself implement physical
communication or unicast information.

Due to the size of secure digital signatures, it is unfortunately necessary for
this system to dabble in raw byte representations in order to be able to batch
messages under one signature for the sake of efficiency.

Physical Interface
------------------

The Topology's interface to the Physical Communication System consists of four
primitives:

- Read an incoming message, if any. The message is returned merely as an array
  of bytes.

- Send a message (simply an array of bytes) to any set of nodes.

- Create a route to another node.

- Destroy a route to another node.

Note that, by design, no information is given on read about the origin of the
message; such information is derived implicitly from the digital signature on
the message.

High-Level Messages
-------------------

High-level messages are simply containers for one or more semantic
messages, signed with a digital signature. This grouping exists for the sake of
efficiency, since the signature is rather large by networking terms. Unlike
most formats used in Praefectus, high-level messages are not encoded with ASN.1
PER, but rather a simple octet-based scheme for the sake of simplicity of
implementation.

A high-level message begins with the following fixed header:

- 2 bytes; public key identity hint

- 32 bytes; signature

- 1 byte; flags

- 4 bytes; instant

- 4 bytes; advisory serial number

The public key identity hint is equal to the first two bytes of the SHA-3 of
the signing node's public key (encoded as per the node-existence message),
which allow the receiver to more rapidly locate the correct public key to use
to verify the message. The hint is by no means unique to the public key. Nodes
are expected to fail to locate the correct public key (ie, assume the message
is invalid) if the hint is incorrect.

The signature consists of a pair of 128-bit little-endian integers,
corresponding to the (r,s) result pair of DSA. The signature is derived from
the SHA-3 of all bytes following the signature, including the flags and instant
fields.

Bit 0 of the flags byte indicates whether the message is fully-public. A
fully-public (bit is set) message may be redistributed immediately; semi-public
messages (if the bit is clear) should only be redistributed according to the
commit-validate rules. Semi-public messages are also passed into the
commit-validate system.

Bit 1 of the flags indicates whether the message is an asynchronous RPC. If
set, bit 0 is meaningless and must be 0, and the message will be discarded
after processing. Every semantic message type is either RPC-like or
distributable, and must be sent in a high-level message of the appropriate
type.

Other flags bits are currently reserved and must be zero.

The instant is a 32-bit little-endian integer indicating the instant at which
this message applies, in particular towards the commit-validate system.

The advisory serial number is a 32-bit little-endian integer, used to allow
nodes to more rapidly repair network faults. Advisory serial numbers are not
required to be unique or to follow any particular sequence. However, it is in a
node's best interest to start advisory serial numbers from zero and increment
by 1 for every redistributable message so as to maximise speed of message
distribution and minimise the perceived latency of that node from the
perspective of other nodes.

After the header, extending to the end of the message, is a series of any
number of chunks. Each chunk consists of a byte indicating its length, followed
by exactly that many bytes, which are to be interpreted as a semantic
message.

A chunk which would have length zero instead indicates that the rest of the
message is garbage. This is used to prevent brute-forcing of message contents
from the commit hash.

Node Insertion
--------------

Node insertion is a rather difficult problem, since it by nature needs to occur
in real time, which cannot (to the author's knowledge) be rolled back
arbitrarily. This means that no node can assume that it's belief about the node
count is correct, which eliminates the possibility of using consensus. This is
further complicated by the need (or at least strong desirability) for nodes to
have unique 32-bit identifiers within the system.

In order to avoid problems posed by systems in which nodes chose their own or
others' ids, node id generation is based upon consistent hashing. It guarantees
the insertion of the new node, but is vulnerable to producing chimeras via
random (or potentially deliberate) collisions.

Every network topology has a random 256-bit salt. In order to join a topology,
a prospective node first queries an existing node for this salt and the current
instant. The node then hashes this identifier and its own public key (encoded
as a little-endian 512-bit integer), and populates the 32 bits of the id with
the first 32 bits of output from SHA-3; bit 0 is clear. If this produces an id
of 0, 2 is used instead. The node then gets its information signed by an
existing member of the network and can proceed with the joining process.

This system is capable of producing two nodes with the same id, though this is
extremely difficult due to the use of the system salt. If it does occur, the
resulting pair of conjoined nodes is referred to as a "chimera node". When a
node detects that another node has become a chimera (ie, has more than one
associated public key), it SHOULD begin voting to DENY that node. However, it
MUST continue to accept and process messegase for that node from all associated
public keys, regardless of how nonsensical the results may be.

Regardless of how a node id is derived, an existing member of the network signs
the information about the new node (including its network address, public key,
and information to derive the id). A node which receives such a valid signed
message MUST accept the new node into the system and continue proliferating
this message.

Historical notes: The method of id generation outlined above was previously
referred to as "commandeerment", and was a fallback method used if
"endorsement" was unavailable. Endorsement assigned most nodes a certain space
of node ids they could give to other nodes, ensuring id uniqueness in the case
of cooperating nodes. However, it would also have been possible for a malicious
node in this set-up to assign multiple ids to a single node. This condition is
substantially harder to handle consistently, since it would require turning the
verifier into a multimap. Therefore endorsement has been removed entirely,
leaving only commandeerment, which no longer needs a name to distinguish it.

The current method also orignally included the timestamp in the hash for
choosing the id, on the grounds that it would make it even harder to
deliberately create a chimera. This would also have led to hydra nodes, though,
and as such has been removed.

Node Join Proceedure
--------------------

(This section is strictly recommendational, and primarily describes the
reference implementation. This section also speaks as if all nodes are always
fully cooperating; see message definitions for correct handling of improper
behaviour.)

In order to join a system, a prospective node must first obtain basic
information about the system in an application-specific way. This information
includes the network address of at least one existing node in the system as
well as any authentication details needed.

The node then chooses one of the existing system members and sends a
GetNetworkInfo message to it (possibly with assistance of triangular routing to
overcome NATs if need be). The node which receives this request will respond
with a NetworkInfo message which provides the final pieces of information that
the node will need (ie, the public key of the bootstrap node and the
system-specific salt). This part of the process is vulnerable to a
Brain-in-a-Jar attack since the node that services the GetNetworkInfo call can
create a different public key and salt for the node, putting it into its own
isolated world. Applications wishing to be secure against this attack should
distribute the NetworkInfo along with the other application-specific
information, bypassing this exchange. (This assumes, of course, that that
"other information" is also secure.)

To begin the joining process proper, the node sends a JoinRequest message to
the same node it got the NetworkInfo from (or any node if the application does
not use that step). The JoinRequest contains sufficient information to prove
the node has authorisation to enter the system (if the application defines any)
and provides the network and key information for the node. The node awaits a
JoinEndorsement or JoinCommandeerment, which provides the node with a probably
unique id within the system.

Once the node has an id, it connects to other nodes both by Route messages and
optionally by a side-channel from the application (eg, via the same method it
discovered the initial node).

The new node first begins using the JoinTree message to quickly learn the
public keys of all nodes that have ever been in the system (which it needs in
order to be able to retain other existing messages), starting from the
bootstrap node, whose public key it got from the NetworkInfo message. To
improve margin of safety, nodes will also traverse the JoinTree of any new
nodes to whom the establish a route before they gain the GRANT status.

Once the join trees have been walked, the node will begin walking the hash
trees of the other nodes beginning with distributed random range queries
followed by a direct tree walk.

At this point, the new node will have a fairly good idea of what the current
system time is. Once no new messages too far in the past have been received,
the node decides it is ready to fully participate, and begins voting to give
itself the GRANT status. (Though this vote carries no weight itself,
cooperating nodes will agree to it anyway.) Once the GRANT status is obtained,
it sends a commit containing the vote messages it sent so far, extending up to
its belief of the current system time. The node is now a fully functional
member of the system.

