Object/Event System
===================

Praefectus uses a three-layer system of contexts to ensure consistency of both
simulation state and network topology.

Contexts
--------

A context (context.h) is a collection of any number of objects (object.h) and
events (event.h). An object is a container of state, both present and
historical, whereas an event is a *spontaneous* mutation of object
state. Events may be inserted and removed at any time, even at times not
corresponding to the time of the event.

Thus, a context allows for consistent handling of a sequence of events even if
they arrive out of order or late, even as the simulation is advancing
independently of the event inflow; all nodes which have accepted the same
set of events will have exactly the same state for the context.

Application Layer
-----------------

The application layer is the inner-most layer in which application-defined
logic is performed.

Transaction Layer
-----------------

The transaction layer sits atop the application layer. It controls the
acceptance and redaction of application events according to voting performed by
various nodes as well as timing considerations.

Application events entering the transaction layer are associated with a
time-out. An incomming event is initially inserted into the application layer,
but is redacted if the time-out expires without there being sufficient votes
for the event. Sufficient votes, even after the redaction, are sufficient to
keep the event in the application permanently (assuming the votes themselves
are not redacted).

An event with zero time-out is called a pessimistic event; it is not inserted
to the inner layer until sufficient votes have been cast. Non-pessimistic
events are said to be optimistic.

Metatransaction Layer
---------------------

The metatransaction layer sits atop the tranaction and application layers. It
ensures that nodes produce consistent results upon the joining and leaving of
other nodes.

Nodes are at any time associated with two permissions: GRANT and DENY. Events
(both to the metatransaction layer and the lower layer) originating from a node
only have effect if the node has the GRANT permission and does *not* have the
DENY permsission; such a node is said to be "alive". Permissions changes are
effected by a vote from a simple majority of existing nodes; such votes are
only counted from nodes that are alive, and only nodes that are alive count
towards the definition of "majority". Permissions changes only ever take the
effect of giving a node GRANT or DENY; thus, permissions changes are fully
idempotent.

Note that votes themselves are subject to retroactive node status changes; this
means that nodes do not all need to have a perfect global view of permissions
at any time.
